Все расчеты для х64 битной системы.

1). Теоритический расчет памяти занимаемой данным объектом(с полями)  User user = new User(20, "Konstantin"):
- Заголовок: 16 байт
- Поле int  age = 4 байта
- Поле String name:
  -- Заголовок 16 байт
  -- три поля int (offset, count, hash) 12 байт
  -- ссылка на массив char[] 4 байт
  -- Выравнивание для кратности 8 = 0
   итого 32 байт
  --- плюс массив char[]:
  ---- Заголовок 16 байт
  ---- элементы char 2 байта * количество символов (Konstantin) 10шт = 20 байт
  ---- Выравнивание для кратности 8 = 0
    итого 36 байт
- итого на строку 32 + 36 = 68 байт

ИТОГО под объект user выделяется 16 + 4 + 68 = 88 байт памяти

2). Теоритический расчет памяти занимаемой данным объектом(с 1 полем) User user2 = new User(30):
- Заголовок: 16 байт
- Поле int  age = 4 байта
- Поле String name:
  -- Заголовок 16 байт
  -- три поля int (offset, count, hash) 12 байт
  -- ссылка на массив char[] 4 байт
  -- Выравнивание для кратности 8 = 0
   итого 32 байт
  --- плюс массив char[]:
  ---- Заголовок 16 байт
  ---- элементы char 2 байта * количество символов 0 = 0
  ---- Выравнивание для кратности 8 = 0
    итого 16 байт
- итого на строку 32 + 16 = 48 байт

ИТОГО под объект user2 выделяется 16 + 4 + 48 = 68 байт + 4 байта (для кратности 8)  = 72 байта памяти

3). Теоритический расчет памяти занимаемой данным объектом (без полей) User user3 = new User():
- Заголовок:  (состоит из)
-- mark word 8 байт
-- klass pointer 4 байта
-- Выравнивание для кратности 8 = 4 байта
Итого заголовок = 16 байт

ИТОГО под пустой(без полей) объект user3 будет выделятся =  16 байт памяти




ОБЪЯСНИТЬ ПОВЕДЕНИЕ ПРОГРАММЫ:

========  Вариант №1 - при следующих условиях: ========
- параметры  -Xmx2m -Xms2m
- создаём в цикле 1000 объектов
- убран метод System.gc()
программа выполняется :
=== Environment state ===
Free: 263
Total: 268
Max: 4284
работу сборщика мусора я не наблюдаю

========  Вариант №2 - при следующих условиях: ========
- параметры  -Xmx2m -Xms2m
- создаём в цикле 5000 объектов
- убран метод System.gc()
программа выполняется :
=== Environment state ===
Free: 263
Total: 268
Max: 4284
работу сборщика мусора я не наблюдаю

========  Вариант №3 - при следующих условиях: ========
- параметры  -Xmx2m -Xms2m
- создаём в цикле 5000 объектов
- добавлен System.gc()
программа выполняется :
=== Environment state ===
Removed 4 Name4
Removed 4165 Name4165
Free: 15
Total: 17
Removed 4164 Name4164
Removed 4163 Name4163
Max: 4284
Removed 4162 Name4162
Removed 4161 Name4161
сборщик мусора включился в работу и удалил некоторые объекты


========   Вариант №4  - ловим Exception: java.lang.OutOfMemoryError  ========
- параметры  -Xmx2m -Xms2m
- создаём в цикле 500_000_000 объектов
- здесь без разницы добавлен или убран метод System.gc()

..Removed 30280630 Name30280630
..Removed 30280549 Name30280549
..Removed 30280499 Name30280499
..Removed 30280445
..Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread "main"

Сборщик мусора запускается автоматически, но со временем падает ошибка нехватки памяти.
Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread "main"
